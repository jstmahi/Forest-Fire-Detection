# -*- coding: utf-8 -*-
"""Final_Forest_Fire_Detection_video.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AQQFVCBV39aEkz6OcbegosO0Tjd-lnnF

Importing Packages
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Model
from tensorflow.keras.layers import (Input, Conv2D, Dense, Flatten, Dropout,
                                     GlobalAveragePooling2D, BatchNormalization,
                                     Activation, Multiply, MaxPooling2D)
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from tensorflow.keras.preprocessing import image

"""Loading Dataset and Data Preprocessing"""

train_dir = "/content/drive/MyDrive/Forest Fire Detection/Dataset/train"
test_dir = "/content/drive/MyDrive/Forest Fire Detection/Dataset/test"

img_size = (128, 128)
batch_size = 32

train_datagen = ImageDataGenerator(rescale=1.0/255.0)
test_datagen = ImageDataGenerator(rescale=1.0/255.0)

train_data = train_datagen.flow_from_directory(
    train_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode="binary",
    shuffle=True
)

test_data = test_datagen.flow_from_directory(
    test_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode="binary",
    shuffle=False
)

print("Class Indices:", train_data.class_indices)

"""Plotting the sample image along with their labels"""

import matplotlib.pyplot as plt
import numpy as np

images, labels = next(train_data)

class_labels = {v: k for k, v in train_data.class_indices.items()}

plt.figure(figsize=(12, 6))
for i in range(10):
    plt.subplot(2, 5, i + 1)
    plt.imshow(images[i])
    plt.title(f"Label: {class_labels[int(labels[i])]}", fontsize=10)
    plt.axis("off")

plt.tight_layout()
plt.show()

"""Build MSA-Net Model with SE Blocks"""

from tensorflow.keras.layers import (Input, Conv2D, Dense, Flatten, Dropout,
                                     GlobalAveragePooling2D, BatchNormalization,
                                     Activation, Multiply, MaxPooling2D, Reshape)


def se_block(input_tensor, ratio=16):
    channels = input_tensor.shape[-1]

    squeeze = GlobalAveragePooling2D()(input_tensor)
    excitation = Dense(channels // ratio, activation="relu")(squeeze)
    excitation = Dense(channels, activation="sigmoid")(excitation)

    excitation = Reshape((1, 1, channels))(excitation)
    return Multiply()([input_tensor, excitation])

def multi_scale_conv(input_tensor, filters):
    conv3 = Conv2D(filters, (3, 3), padding="same", activation="relu")(input_tensor)
    conv5 = Conv2D(filters, (5, 5), padding="same", activation="relu")(input_tensor)
    conv7 = Conv2D(filters, (7, 7), padding="same", activation="relu")(input_tensor)

    output = tf.keras.layers.Add()([conv3, conv5, conv7])
    output = BatchNormalization()(output)
    return output

def msa_net(input_shape=(128, 128, 3)):
    inputs = Input(shape=input_shape)

    x = multi_scale_conv(inputs, 64)
    x = se_block(x)

    x = multi_scale_conv(x, 128)
    x = se_block(x)

    x = MaxPooling2D(pool_size=(2, 2))(x)

    x = Flatten()(x)
    x = Dense(256, activation="relu")(x)
    x = Dropout(0.3)(x)
    outputs = Dense(1, activation="sigmoid")(x)

    model = Model(inputs, outputs)
    return model

model = msa_net()
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
              loss="binary_crossentropy",
              metrics=["accuracy"])

model.summary()

"""Training the Model with Early Stopping & Learning Rate Scheduling"""

early_stopping = EarlyStopping(monitor="val_loss", patience=5, restore_best_weights=True)
reduce_lr = ReduceLROnPlateau(monitor="val_loss", factor=0.5, patience=3, min_lr=1e-6)

history = model.fit(
    train_data,
    epochs=100,
    validation_data=test_data,
    callbacks=[early_stopping, reduce_lr]
)

"""Saving the model"""

model.save("/content/drive/MyDrive/Forest Fire Detection/model.h5")

"""Saving the history of the model"""

import json

history_dict = history.history

with open("/content/drive/MyDrive/Forest Fire Detection/model_history.json", "w") as f:
    json.dump(history_dict, f)

print("Training history saved successfully!")

"""Loading the Saved Model"""

from tensorflow.keras.models import load_model

loaded_model = load_model("/content/drive/MyDrive/Forest Fire Detection/model.h5")
print("Model loaded successfully!")

"""Loading the History"""

import json

with open("/content/drive/MyDrive/Forest Fire Detection/model_history.json", "r") as f:
    loaded_history = json.load(f)

print("History loaded successfully!")

"""Printing the Test Accuracy and Loss"""

test_loss, test_acc = loaded_model.evaluate(test_data)
print(f"Test Accuracy: {test_acc * 100:.2f}%")
print(f"Test Loss: {test_loss:.4f}")



"""Plotting the Training and Validataion Accuracy Curves"""

import matplotlib.pyplot as plt

epochs = range(1, len(loaded_history["loss"]) + 1)

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(epochs, loaded_history["accuracy"], "b", label="Training Accuracy")
plt.plot(epochs, loaded_history["val_accuracy"], "r", label="Validation Accuracy")
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()
plt.title("Training vs Validation Accuracy")

"""Plotting the Training and Testing Loss curve"""

plt.plot(epochs, loaded_history["loss"], "b", label="Training Loss")
plt.plot(epochs, loaded_history["val_loss"], "r", label="Validation Loss")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend()
plt.title("Training vs Validation Loss")

plt.show()

"""Printing the Classification Report"""

import numpy as np
from sklearn.metrics import classification_report, confusion_matrix

true_labels = test_data.classes

predictions = loaded_model.predict(test_data)
predicted_classes = np.where(predictions > 0.5, 1, 0).flatten()

print("\nClassification Report:\n", classification_report(true_labels, predicted_classes, target_names=["Fire", "Non-Fire"]))

"""Printing the Confusion Matrix"""

import seaborn as sns

cm = confusion_matrix(true_labels, predicted_classes)
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Fire", "Non-Fire"], yticklabels=["Fire", "Non-Fire"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

"""Predicting class for the test sample"""

class_labels = {0: "Fire", 1: "Non-Fire"}

def predict_image(img_path, img_size=(128, 128)):
    img = image.load_img(img_path, target_size=img_size)
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = loaded_model.predict(img_array)[0][0]

    predicted_class = 1 if prediction > 0.5 else 0
    predicted_label = class_labels[predicted_class]

    plt.figure(figsize=(5, 5))
    plt.imshow(img)
    plt.title(f"Predicted: {predicted_label}", color="green" if predicted_class == 0 else "blue")

    plt.axis("off")
    plt.show()

    print("Predicted Label:", predicted_label)

sample_image_path = "/content/drive/MyDrive/fire.jpg"
predict_image(sample_image_path)

"""Plotting the Actual and Predicted Class for 5 sample Test images"""

import os

test_image_dir = "/content/drive/MyDrive/Forest Fire Detection/Dataset/test"

fire_images = os.listdir(os.path.join(test_image_dir, "fire"))[:5]
non_fire_images = os.listdir(os.path.join(test_image_dir, "non fire"))[:5]

print("Fire Images:", fire_images)
print("Non-Fire Images:", non_fire_images)

def load_and_preprocess_image(img_path, img_size=(128, 128)):
    img = image.load_img(img_path, target_size=img_size)
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    return img_array, img

plt.figure(figsize=(12, 6))
for i, img_name in enumerate(fire_images):
    img_path = os.path.join(test_image_dir, "fire", img_name)
    img_array, img = load_and_preprocess_image(img_path)

    prediction = loaded_model.predict(img_array)[0][0]
    predicted_label = "Non-Fire" if prediction > 0.5 else "Fire"

    plt.subplot(1, 5, i + 1)
    plt.imshow(img)
    plt.title(f"True: Fire\nPred: {predicted_label}",
              color="green" if predicted_label == "Fire" else "red")
    plt.axis("off")

plt.suptitle("Fire Images - True vs Predicted", fontsize=14, color="darkred")
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))
for i, img_name in enumerate(non_fire_images):
    img_path = os.path.join(test_image_dir, "non fire", img_name)
    img_array, img = load_and_preprocess_image(img_path)

    prediction = loaded_model.predict(img_array)[0][0]
    predicted_label = "Non-Fire" if prediction > 0.5 else "Fire"

    plt.subplot(1, 5, i + 1)
    plt.imshow(img)
    plt.title(f"True: Non-Fire\nPred: {predicted_label}",
              color="green" if predicted_label == "Non-Fire" else "red")
    plt.axis("off")

plt.suptitle("Non-Fire Images - True vs Predicted", fontsize=14, color="darkblue")
plt.tight_layout()
plt.show()